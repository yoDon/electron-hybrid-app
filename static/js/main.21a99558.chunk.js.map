{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ipcRenderer","window","isInElectronRenderer","nodeRequire","ipcRendererStub","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resultDiv","apiPort","apiSigningKey","appGlobalClient","handleKeyDown","event","key","math","currentTarget","value","undefined","textContent","query","gql","_templateObject","variables","signingkey","then","_ref","data","calc","catch","e","console","log","on","unused","argString","arg","JSON","parse","port","signingKey","ApolloClient","cache","InMemoryCache","link","HttpLink","fetch","uri","send","_this2","react_default","a","createElement","className","src","logo","alt","style","color","onKeyDown","ref","elem","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mfCSxC,IAAMC,EAAeC,OAAeC,qBAC7BD,OAAeE,YAAY,YAAYH,YACvCC,OAAeG,gBAgFPC,cAnEb,SAAAA,EAAYC,GAAiB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC3BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KARDQ,UAAkC,KAOZP,EALrBQ,QAAU,IAKWR,EAJrBS,cAAgB,GAIKT,EAFrBU,gBAAkB,KAEGV,EAuCrBW,cAAgB,SAACC,GACvB,GAAkB,UAAdA,EAAMC,IAAiB,CACzB,IAAMC,EAAOF,EAAMG,cAAcC,MACjC,GAAoB,OAAhBvB,QAAwCwB,IAAhBxB,GAAsD,OAAzBO,EAAKU,gBAE5D,YADAV,EAAKO,UAAWW,YAAc,gDAGhClB,EAAKU,gBAAgBS,MAAM,CACzBA,MAAMC,IAADC,KAGLC,UAAW,CACTR,OACAS,WAAYvB,EAAKS,iBAGlBe,KAAK,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACP1B,EAAKO,UAAWW,YAAcQ,EAAKC,OAEpCC,MAAM,SAACC,GACNC,QAAQC,IAAI,mCACZD,QAAQC,IAAIF,GACZ7B,EAAKO,UAAWW,YAAc,kCAAoClB,EAAKQ,QAAU,oBAAsBR,EAAKS,cAAgB,QA3D9HhB,IACFA,EAAYuC,GAAG,iBAAkB,SAACC,EAAYC,GAC5C,IAAMC,EAAyCC,KAAKC,MAAMH,GAC1DlC,EAAKQ,QAAU2B,EAAIG,KACnBtC,EAAKS,cAAgB0B,EAAII,WACzBvC,EAAKU,gBAAkB,IAAI8B,IAAa,CACtCC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAS,CACjBC,MAAOA,IACPC,IAAK,oBAAsB9C,EAAKQ,QAAU,kBAIhDf,EAAYsD,KAAK,sBAfQ/C,wEAmBb,IAAAgD,EAAA7C,KACd,OACE8C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iCAAwBF,EAAAC,EAAAC,cAAA,qBAAxB,KACAF,EAAAC,EAAAC,cAAA,qCAC2BF,EAAAC,EAAAC,cAAA,uBAD3B,qDAIAF,EAAAC,EAAAC,cAAA,SACEK,MAAO,CAAEC,MAAM,SACfC,UAAWvD,KAAKQ,gBAElBsC,EAAAC,EAAAC,cAAA,OAAKQ,IAAK,SAACC,GAAD,OAAUZ,EAAKzC,UAAYqD,cA1C7BC,mBCHEC,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAQC,SAASC,eAAe,SDoI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAACkD,GAClCA,EAAaC,aACZ/C,MAAM,SAACgD,GACN9C,QAAQC,IAAI6C,OAGfhD,MAAM,SAACgD,GACN9C,QAAQC,IAAI6C","file":"static/js/main.21a99558.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport gql from \"graphql-tag\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport logo from \"./logo.svg\";\r\n\r\nconst ipcRenderer = (window as any).isInElectronRenderer\r\n    ? (window as any).nodeRequire(\"electron\").ipcRenderer\r\n    : (window as any).ipcRendererStub;\r\n\r\ninterface IOwnProps {} // tslint:disable-line\r\n\r\nclass App extends Component<IOwnProps> {\r\n\r\n  public resultDiv:HTMLDivElement | null = null;\r\n\r\n  private apiPort = 5000;\r\n  private apiSigningKey = \"\";\r\n\r\n  private appGlobalClient = null as unknown as ApolloClient<NormalizedCacheObject>;\r\n\r\n  constructor(props:IOwnProps) {\r\n    super(props);\r\n    if (ipcRenderer) {\r\n      ipcRenderer.on(\"m2w-apiDetails\", (unused:any, argString:string) => { // tslint:disable-line\r\n        const arg:{ port:number, signingKey:string } = JSON.parse(argString);\r\n        this.apiPort = arg.port;\r\n        this.apiSigningKey = arg.signingKey;\r\n        this.appGlobalClient = new ApolloClient({\r\n          cache: new InMemoryCache(),\r\n          link: new HttpLink({\r\n            fetch:(fetch as any),\r\n            uri: \"http://127.0.0.1:\" + this.apiPort + \"/graphql/\",\r\n          }),\r\n        });\r\n      });\r\n      ipcRenderer.send(\"w2m-getApiDetails\");\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          <p>Input something like <code>1 + 1</code>.</p>\r\n          <p>\r\n            This calculator supports <code>+-*/^()</code>,\r\n            whitespaces, and integers and floating numbers.\r\n          </p>\r\n          <input\r\n            style={{ color:\"black\" }}\r\n            onKeyDown={this.handleKeyDown}\r\n          />\r\n          <div ref={(elem) => this.resultDiv = elem}/>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleKeyDown = (event:React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      const math = event.currentTarget.value;\r\n      if (ipcRenderer === null || ipcRenderer === undefined || this.appGlobalClient === null) {\r\n        this.resultDiv!.textContent = \"this page only works when hosted in electron\";\r\n        return;\r\n      }\r\n      this.appGlobalClient.query({\r\n        query:gql`query calc($signingkey:String!, $math:String!) {\r\n          calc(signingkey:$signingkey, math:$math)\r\n        }`,\r\n        variables: {\r\n          math,\r\n          signingkey: this.apiSigningKey,\r\n        },\r\n      })\r\n        .then(({ data }) => {\r\n          this.resultDiv!.textContent = data.calc;\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"Error contacting graphql server\");\r\n          console.log(e);\r\n          this.resultDiv!.textContent = \"Error getting result with port=\" + this.apiPort + \" and signingkey='\" + this.apiSigningKey + \"'\";\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ninterface IConfig {\r\n  onSuccess?:(registration:ServiceWorkerRegistration) => void;\r\n  onUpdate?:(registration:ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?:IConfig) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env:{ [key:string]:string } }).env.PUBLIC_URL,\r\n      window.location.href,\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl:string, config?:IConfig) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker === null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It\"s the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl:string, config?:IConfig) {\r\n  // Check if the service worker can be found. If it can\"t reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister()\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}